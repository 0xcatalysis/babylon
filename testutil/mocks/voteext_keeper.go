// Code generated by MockGen. DO NOT EDIT.
// Source: x/checkpointing/voteext_expected_keeper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	bls12381 "github.com/babylonchain/babylon/crypto/bls12381"
	types "github.com/babylonchain/babylon/x/checkpointing/types"
	types0 "github.com/babylonchain/babylon/x/epoching/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointingKeeper is a mock of CheckpointingKeeper interface.
type MockCheckpointingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointingKeeperMockRecorder
}

// MockCheckpointingKeeperMockRecorder is the mock recorder for MockCheckpointingKeeper.
type MockCheckpointingKeeperMockRecorder struct {
	mock *MockCheckpointingKeeper
}

// NewMockCheckpointingKeeper creates a new mock instance.
func NewMockCheckpointingKeeper(ctrl *gomock.Controller) *MockCheckpointingKeeper {
	mock := &MockCheckpointingKeeper{ctrl: ctrl}
	mock.recorder = &MockCheckpointingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointingKeeper) EXPECT() *MockCheckpointingKeeperMockRecorder {
	return m.recorder
}

// GetBLSSignerAddress mocks base method.
func (m *MockCheckpointingKeeper) GetBLSSignerAddress() types1.ValAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBLSSignerAddress")
	ret0, _ := ret[0].(types1.ValAddress)
	return ret0
}

// GetBLSSignerAddress indicates an expected call of GetBLSSignerAddress.
func (mr *MockCheckpointingKeeperMockRecorder) GetBLSSignerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBLSSignerAddress", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetBLSSignerAddress))
}

// GetEpoch mocks base method.
func (m *MockCheckpointingKeeper) GetEpoch(ctx context.Context) *types0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch", ctx)
	ret0, _ := ret[0].(*types0.Epoch)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockCheckpointingKeeperMockRecorder) GetEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetEpoch), ctx)
}

// GetValidatorAddress mocks base method.
func (m *MockCheckpointingKeeper) GetValidatorAddress() types1.ValAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorAddress")
	ret0, _ := ret[0].(types1.ValAddress)
	return ret0
}

// GetValidatorAddress indicates an expected call of GetValidatorAddress.
func (mr *MockCheckpointingKeeperMockRecorder) GetValidatorAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorAddress", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetValidatorAddress))
}

// GetValidatorSet mocks base method.
func (m *MockCheckpointingKeeper) GetValidatorSet(ctx context.Context, epochNumber uint64) types0.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, epochNumber)
	ret0, _ := ret[0].(types0.ValidatorSet)
	return ret0
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockCheckpointingKeeperMockRecorder) GetValidatorSet(ctx, epochNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockCheckpointingKeeper)(nil).GetValidatorSet), ctx, epochNumber)
}

// SignBLS mocks base method.
func (m *MockCheckpointingKeeper) SignBLS(epochNum uint64, blockHash types.BlockHash) (bls12381.Signature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignBLS", epochNum, blockHash)
	ret0, _ := ret[0].(bls12381.Signature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignBLS indicates an expected call of SignBLS.
func (mr *MockCheckpointingKeeperMockRecorder) SignBLS(epochNum, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignBLS", reflect.TypeOf((*MockCheckpointingKeeper)(nil).SignBLS), epochNum, blockHash)
}

// VerifyBLSSig mocks base method.
func (m *MockCheckpointingKeeper) VerifyBLSSig(ctx context.Context, sig *types.BlsSig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBLSSig", ctx, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyBLSSig indicates an expected call of VerifyBLSSig.
func (mr *MockCheckpointingKeeperMockRecorder) VerifyBLSSig(ctx, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBLSSig", reflect.TypeOf((*MockCheckpointingKeeper)(nil).VerifyBLSSig), ctx, sig)
}
