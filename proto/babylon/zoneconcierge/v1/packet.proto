syntax = "proto3";
package babylon.zoneconcierge.v1;

import "babylon/btccheckpoint/v1/btccheckpoint.proto";
import "babylon/checkpointing/v1/checkpoint.proto";
import "babylon/btclightclient/v1/btclightclient.proto";
import "babylon/epoching/v1/epoching.proto";
import "babylon/zoneconcierge/v1/zoneconcierge.proto";

option go_package = "github.com/babylonchain/babylon/x/zoneconcierge/types";

// ZoneconciergePacketData is the message that defines the IBC packets of
// ZoneConcierge
message ZoneconciergePacketData {
  // packet is the actual message carried in the IBC packet
  oneof packet { BTCTimestamp btc_timestamp = 1; }
}

// MsgBTCTimestamp is a BTC timestamp
message BTCTimestamp {
  // header is the last CZ header in the finalized Babylon epoch
  babylon.zoneconcierge.v1.IndexedHeader header = 1;

  /*
    Data for BTC light client
  */
  // btc_headers is BTC headers from the BTC header tip upon the last finalised epoch to the current tip
  repeated babylon.btclightclient.v1.BTCHeaderInfo btc_headers = 2;

  /*
    Data for Babylon epoch chain
  */
  // epoch_info is the metadata of the sealed epoch
  babylon.epoching.v1.Epoch epoch_info = 3;
  // raw_checkpoint is the raw checkpoint that seals this epoch
  babylon.checkpointing.v1.RawCheckpoint raw_checkpoint = 4;
  // btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch
  babylon.btccheckpoint.v1.SubmissionKey btc_submission_key = 5;

  /* 
    Proofs that the header is finalized
  */
  babylon.zoneconcierge.v1.ProofFinalizedChainInfo proof = 6;
}